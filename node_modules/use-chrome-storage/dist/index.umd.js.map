{"version":3,"file":"index.umd.js","sources":["../src/useChromeStorage.js","../src/storage.js","../src/createChromeStorageStateHook.js","../src/index.js"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\r\nimport {storage} from './storage';\r\n\r\n\r\n/**\r\n * Basic hook for storage\r\n * @param {string} key\r\n * @param {*} initialValue\r\n * @param {'local'|'sync'} storageArea\r\n * @returns {[*, function(*= any): void, boolean, string]}\r\n */\r\nexport default function useChromeStorage(key, initialValue, storageArea) {\r\n    const [INITIAL_VALUE] = useState(() => {\r\n        return typeof initialValue === 'function' ? initialValue() : initialValue;\r\n    });\r\n    const [STORAGE_AREA] = useState(storageArea);\r\n    const [state, setState] = useState(INITIAL_VALUE);\r\n    const [isPersistent, setIsPersistent] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        storage.get(key, INITIAL_VALUE, STORAGE_AREA)\r\n            .then(res => {\r\n                setState(res);\r\n                setIsPersistent(true);\r\n                setError('');\r\n            })\r\n            .catch(error => {\r\n                setIsPersistent(false);\r\n                setError(error);\r\n            });\r\n    }, [key, INITIAL_VALUE, STORAGE_AREA]);\r\n\r\n    const updateValue = useCallback((newValue) => {\r\n        const toStore = typeof newValue === 'function' ? newValue(state) : newValue;\r\n        storage.set(key, toStore, STORAGE_AREA)\r\n            .then(() => {\r\n                setIsPersistent(true);\r\n                setError('');\r\n            })\r\n            .catch(error => {\r\n                // set newValue to local state because chrome.storage.onChanged won't be fired in error case\r\n                setState(toStore);\r\n                setIsPersistent(false);\r\n                setError(error);\r\n            });\r\n    }, [STORAGE_AREA, key, state]);\r\n\r\n    useEffect(() => {\r\n        const onChange = (changes, areaName) => {\r\n            if (areaName === STORAGE_AREA && key in changes) {\r\n                setState(changes[key].newValue);\r\n                setIsPersistent(true);\r\n                setError('');\r\n            }\r\n        };\r\n        chrome.storage.onChanged.addListener(onChange);\r\n        return () => {\r\n            chrome.storage.onChanged.removeListener(onChange);\r\n        };\r\n    }, [key, STORAGE_AREA]);\r\n\r\n    return [state, updateValue, isPersistent, error];\r\n}\r\n","export const storage = {\r\n    get: (key, defaultValue, storageArea) => {\r\n        const keyObj = defaultValue === undefined ? key : {[key]: defaultValue};\r\n        return new Promise((resolve, reject) => {\r\n            chrome.storage[storageArea].get(keyObj, items => {\r\n                const error = chrome.runtime.lastError;\r\n                if (error) return reject(error);\r\n                resolve(items[key]);\r\n            });\r\n        });\r\n    },\r\n    set: (key, value, storageArea) => {\r\n        return new Promise((resolve, reject) => {\r\n            chrome.storage[storageArea].set({[key]: value}, () => {\r\n                const error = chrome.runtime.lastError;\r\n                error ? reject(error) : resolve();\r\n            });\r\n        });\r\n    },\r\n};\r\n","import {useCallback, useEffect} from 'react';\r\nimport useChromeStorage from './useChromeStorage';\r\n\r\n\r\nexport default function createChromeStorageStateHook(key, initialValue, storageArea) {\r\n    const consumers = [];\r\n\r\n    return function useCreateChromeStorageHook() {\r\n        const [value, setValue, isPersistent, error] = useChromeStorage(key, initialValue, storageArea);\r\n\r\n        const setValueAll = useCallback(newValue => {\r\n            for (const consumer of consumers) {\r\n                consumer(newValue);\r\n            }\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            consumers.push(setValue);\r\n            return () => {\r\n                consumers.splice(consumers.indexOf(setValue), 1);\r\n            };\r\n        }, [setValue]);\r\n\r\n        return [value, setValueAll, isPersistent, error];\r\n    };\r\n}\r\n","import useChromeStorage from './useChromeStorage';\r\nimport createChromeStorageStateHook from './createChromeStorageStateHook';\r\n\r\n\r\n/**\r\n * Hook which will use `chrome.storage.local` to persist state.\r\n *\r\n * @param {string} key - they key name in chrome's storage. Nested keys not supported\r\n * @param {*} [initialValue] - default value to use\r\n * @returns {[any, (value: any) => void, boolean, string]} - array of\r\n *      stateful `value`,\r\n *      function to update this `value`,\r\n *      `isPersistent` - will be `false` if error occurred during reading/writing chrome.storage,\r\n *      `error` - will contain error appeared in storage. if isPersistent is true will be empty string\r\n */\r\nfunction useChromeStorageLocal(key, initialValue) {\r\n    return useChromeStorage(key, initialValue, 'local');\r\n}\r\n\r\n/**\r\n * Hook which will use `chrome.storage.sync` to persist state.\r\n *\r\n * @param {string} key - they key name in chrome's storage. Nested keys not supported\r\n * @param {*} [initialValue] - default value to use\r\n * @returns {[any, (value: any) => void, boolean, string]} - array of\r\n *      stateful `value`,\r\n *      function to update this `value`,\r\n *      `isPersistent` - will be `false` if error occurred during reading/writing chrome.storage,\r\n *      `error` - will contain error appeared in storage. if isPersistent is true will be empty string\r\n */\r\nfunction useChromeStorageSync(key, initialValue) {\r\n    return useChromeStorage(key, initialValue, 'sync');\r\n}\r\n\r\n/**\r\n * Use to create state with chrome.storage.local.\r\n * Useful if you want to reuse same state across components and/or context (like in popup, content script, background pages)\r\n *\r\n * @param {string} key - they key name in chrome's storage. Nested keys not supported\r\n * @param {*} [initialValue] - default value to use\r\n * @returns {function(): [any, (value: any) => void, boolean, string]}\r\n */\r\nfunction createChromeStorageStateHookLocal(key, initialValue) {\r\n    return createChromeStorageStateHook(key, initialValue, 'local');\r\n}\r\n\r\n/**\r\n * Use to create state with chrome.storage.sync.\r\n * Useful if you want to reuse same state across components and/or context (like in popup, content script, background pages)\r\n *\r\n * @param {string} key - they key name in chrome's storage. Nested keys not supported\r\n * @param {*} [initialValue] - default value to use\r\n * @returns {function(): [any, (value: any) => void, boolean, string]}\r\n */\r\nfunction createChromeStorageStateHookSync(key, initialValue) {\r\n    return createChromeStorageStateHook(key, initialValue, 'sync');\r\n}\r\n\r\nexport {\r\n    useChromeStorageLocal,\r\n    useChromeStorageSync,\r\n    createChromeStorageStateHookLocal,\r\n    createChromeStorageStateHookSync,\r\n};\r\n"],"names":["key","initialValue","storageArea","INITIAL_VALUE","useState","STORAGE_AREA","state","setState","isPersistent","setIsPersistent","error","setError","useEffect","defaultValue","undefined","resolve","reject","chrome","storage","get","keyObj","items","runtime","lastError","then","res","catch","useCallback","newValue","value","set","toStore","changes","areaName","onChanged","addListener","onChange","removeListener","updateValue","setValue","useChromeStorage","consumer","consumers","push","splice","indexOf","setValueAll"],"mappings":"wRAWyCA,EAAKC,EAAcC,GACxD,MAAOC,GAAiBC,WAAS,IACE,qBAAaH,IAAiBA,IAE1DI,GAAgBD,WAASF,IACzBI,EAAOC,GAAYH,WAASD,IAC5BK,EAAcC,GAAmBL,YAAS,IAC1CM,EAAOC,GAAYP,WAAS,IAEnCQ,YAAU,KCnBL,EAACZ,EAAKa,EAAcX,KACrB,aAAgCY,IAAjBD,EAA6Bb,EAAM,CAACA,CAACA,GAAMa,GAC1D,mBAAmB,CAACE,EAASC,KACzBC,OAAOC,QAAQhB,GAAaiB,IAAIC,EAAQC,IACpC,QAAcJ,OAAOK,QAAQC,UAC7B,GAAIb,EAAO,SAAcA,GACzBK,EAAQM,EAAMrB,SDctBkB,CAAYlB,EAAKG,EAAeE,GAC3BmB,KAAKC,IACFlB,EAASkB,GACThB,GAAgB,GAChBE,EAAS,MAEZe,MAAMhB,IACHD,GAAgB,GAChBE,EAASD,MAElB,CAACV,EAAKG,EAAeE,IAExB,QAAoBsB,cAAaC,IAC7B,QAAoC,qBAAaA,EAAStB,GAASsB,ECvBlE,EAAC5B,EAAK6B,EAAO3B,gBACK,CAACa,EAASC,KACzBC,OAAOC,QAAQhB,GAAa4B,IAAI,CAAC9B,CAACA,GAAM6B,GAAQ,KAC5C,QAAcZ,OAAOK,QAAQC,UAC7Bb,EAAQM,EAAON,GAASK,QDoBhCG,CAAYlB,EAAK+B,EAAS1B,GACrBmB,KAAK,KACFf,GAAgB,GAChBE,EAAS,MAEZe,MAAMhB,IAEHH,EAASwB,GACTtB,GAAgB,GAChBE,EAASD,MAElB,CAACL,EAAcL,EAAKM,IAgBvB,OAdAM,YAAU,KACN,QAAiB,CAACoB,EAASC,KACnBA,IAAa5B,GAAgBL,SAC7BO,EAASyB,EAAQhC,GAAK4B,UACtBnB,GAAgB,GAChBE,EAAS,MAIjB,OADAM,OAAOC,QAAQgB,UAAUC,YAAYC,GAC9B,KACHnB,OAAOC,QAAQgB,UAAUG,eAAeD,KAE7C,CAACpC,EAAKK,IAEF,CAACC,EAAOgC,EAAa9B,EAAcE,cE1DOV,EAAKC,EAAcC,GACpE,QAAkB,GAElB,kBACI,MAAO2B,EAAOU,EAAU/B,EAAcE,GAAS8B,EAAiBxC,EAAKC,EAAcC,KAE/DyB,cAAYC,IAC5B,IAAK,aACDa,EAASb,IAEd,IASH,OAPAhB,YAAU,KACN8B,EAAUC,KAAKJ,GACR,KACHG,EAAUE,OAAOF,EAAUG,QAAQN,GAAW,KAEnD,CAACA,IAEG,CAACV,EAAOiB,EAAatC,EAAcE,wCCmBlD,SAA2CV,EAAKC,GAC5C,SAAoCD,EAAKC,EAAc,6CAW3D,SAA0CD,EAAKC,GAC3C,SAAoCD,EAAKC,EAAc,iCAxC3D,SAA+BD,EAAKC,GAChC,SAAwBD,EAAKC,EAAc,iCAc/C,SAA8BD,EAAKC,GAC/B,SAAwBD,EAAKC,EAAc"}